# Chunk 1: settings
options(width = 300)
options(encoding = 'UTF-8')
knitr::opts_chunk$set(
fig.width = 7,
fig.height = 5,
fig.align = "center",
fig.show="asis",
size = "tiny",
include = TRUE,
echo = TRUE,
eval = TRUE,
warning = FALSE,
message = FALSE,
results="markup",
tidy=FALSE,
tidy.opts=list(width.cutoff=90),
class.output="bg-success"
)
# Chunk 2
#install.packages("MultiVarSel_1.0.tar.gz",repos=NULL)
library(MultiVarSel)
library(reshape)
library(ggplot2)
library(knitr)
# Chunk 3
table1<-read.table("proteome.csv", sep=";", dec=".", header=T,row.names=1)
# Chunk 4
temperature<-factor(rep(c("Low","Medium","Elevated"),each=3),levels=c("Low","Medium","Elevated"))
table2<-cbind.data.frame(temperature,table1[,-1])
# Chunk 5
which(colMeans(table2[,2:dim(table2)[2]])==0)
which(apply(table2[,2:dim(table2)[2]],2,sd)==0)
which(is.na(table2))
# Chunk 6
Y <- as.matrix(table2[, -1])
# Chunk 7
X <- model.matrix(lm(Y ~ temperature + 0,data=table2))
p <- ncol(X)
n=nrow(X)
print(n)
# Chunk 8
q=dim(Y)[2]
print(q)
# Chunk 9
Y=scale(Y)
# Chunk 10
residus=lm(as.matrix(Y)~X-1)$residuals
# Chunk 11
pvalue=whitening_test(residus)
print(pvalue)
# Chunk 12
result=whitening_choice(residus,c("AR1","nonparam","ARMA"),pAR=1,qMA=0)
result
# Chunk 13
square_root_inv_hat_Sigma=whitening(residus,"nonparam",pAR=1,qMA=0)
# Chunk 14
#Freqs2=variable_selection(Y,X,square_root_inv_hat_Sigma,
#                    nb_repli=7000,parallel=FALSE,nb.cores=1)
# Chunk 15
#save(Freqs2,
#     file='Freqs_proteome_TOEPLITZ_nbreplis_7000_2022.Rdata')
# Chunk 16
load("Freqs_proteome_TOEPLITZ_nbreplis_7000_2022.Rdata")
max(Freqs2$frequency)
# Chunk 17
colnames(Freqs2)<-c('Names_of_Y','Names_of_X','frequency')
Freqs2=data.frame(Freqs2)
plot(sort(Freqs2$frequency,decreasing = TRUE),type='s')
plot(Freqs2$frequency)
# Chunk 18
colnames(Freqs2)<-c('Names_of_Y','Names_of_X','frequency')
sort(Freqs2$frequency,decreasing = T)[1:50]
# Chunk 19
seuil=0.95
Freqs2$Names_of_X=gsub(pattern='temperature',replacement='',Freqs2$Names_of_X)
indices=which(Freqs2$frequency>=seuil)
# Chunk 20
Yvec=as.numeric(Y%*%square_root_inv_hat_Sigma)
Xvec=kronecker(t(square_root_inv_hat_Sigma),X)
Xvec_sel=(Xvec[,indices])
B_sel_hat=solve(t(Xvec_sel)%*%Xvec_sel,t(Xvec_sel)%*%Yvec)
Freqs2$estim=rep(0,p*q)
Freqs2$estim[indices]=as.vector(B_sel_hat)
# Chunk 21
gr<-ggplot(data=Freqs2[Freqs2$frequency>=seuil,],
aes(x=Names_of_Y,y=Names_of_X,color=estim))+
scale_color_gradient2(low="steelblue",mid = "white", high ="red")+
geom_point(size=2)+theme_bw()+ylab('Temperature')+
xlab('Proteins')+theme(axis.text.x = element_text(angle=90))
gr
save(gr,file="PROT_95_7krep.png")
# Chunk 22
estime=Freqs2[Freqs2$estim>0,]
estime$Names_of_Y
estime=data.frame(estime)
# Chunk 23
prot.select<-read.table("prot_var_select.csv", sep="", dec=".", header=T,row.names=1)
temperature<-factor(rep(c("Low","Medium","Elevated"),each=3),levels=c("Low","Medium","Elevated"))
prot.select<-cbind.data.frame(temperature,prot.select[,-1])
prot.select[,-1]
# Chunk 24
library("knitr") # pour avoir un format table dans les sorties
library("ggplot2") # pour avoir de "beaux"" graphiques
library("FactoMineR") # pour effectuer l'ACP
library("factoextra") # pour extraire et visualiser les résultats issus de FactoMineR
library("corrplot")
# Chunk 25
prot.CR=scale(prot.select[,2:22])
ncol(prot.select[,2:22])
# Chunk 26
# methode des kmeans
Kmax = ncol(prot.CR)
IW=numeric(Kmax)
for (k in 1:(Kmax))
{
km = kmeans(prot.CR,centers=k,nstart = 200)
IW[k] = km$tot.withinss
}
ggplot(data.frame(k = 1:(Kmax),
Iw = IW)) +
aes(x = k, y = Iw) +
geom_point() + # On trace les points
geom_line() + # On les relie par une ligne
labs(x = "K",y = expression(I[W](K)))
# Chunk 27
K = 3
km.prot.CR = kmeans(prot.CR,centers=K,nstart = 200)
km.prot.CR$totss
# Chunk 28
km.prot.CR$betweenss
km.prot.CR$tot.withinss
km.prot.CR = km.prot.CR$cluste
kable(km.prot.CR)
# Chunk 29
setwd("C:/Users/delpi/Google Drive/COURS/AgroParisTech/2A/UC2/TD/3483462/3483462/Proteome/VAR SELECT")
# Chunk 1: settings
options(width = 300)
options(encoding = 'UTF-8')
knitr::opts_chunk$set(
fig.width = 7,
fig.height = 5,
fig.align = "center",
fig.show="asis",
size = "tiny",
include = TRUE,
echo = TRUE,
eval = TRUE,
warning = FALSE,
message = FALSE,
results="markup",
tidy=FALSE,
tidy.opts=list(width.cutoff=90),
class.output="bg-success"
)
# Chunk 2
#install.packages("MultiVarSel_1.0.tar.gz",repos=NULL)
library(MultiVarSel)
library(reshape)
library(ggplot2)
library(knitr)
# Chunk 3
table1<-read.table("proteome.csv", sep=";", dec=".", header=T,row.names=1)
# Chunk 4
temperature<-factor(rep(c("Low","Medium","Elevated"),each=3),levels=c("Low","Medium","Elevated"))
table2<-cbind.data.frame(temperature,table1[,-1])
# Chunk 5
which(colMeans(table2[,2:dim(table2)[2]])==0)
which(apply(table2[,2:dim(table2)[2]],2,sd)==0)
which(is.na(table2))
# Chunk 6
Y <- as.matrix(table2[, -1])
# Chunk 7
X <- model.matrix(lm(Y ~ temperature + 0,data=table2))
p <- ncol(X)
n=nrow(X)
print(n)
# Chunk 8
q=dim(Y)[2]
print(q)
# Chunk 9
Y=scale(Y)
# Chunk 10
residus=lm(as.matrix(Y)~X-1)$residuals
# Chunk 11
pvalue=whitening_test(residus)
print(pvalue)
# Chunk 12
result=whitening_choice(residus,c("AR1","nonparam","ARMA"),pAR=1,qMA=0)
result
# Chunk 13
square_root_inv_hat_Sigma=whitening(residus,"nonparam",pAR=1,qMA=0)
# Chunk 14
#Freqs2=variable_selection(Y,X,square_root_inv_hat_Sigma,
#                    nb_repli=7000,parallel=FALSE,nb.cores=1)
# Chunk 15
#save(Freqs2,
#     file='Freqs_proteome_TOEPLITZ_nbreplis_7000_2022.Rdata')
# Chunk 16
load("Freqs_proteome_TOEPLITZ_nbreplis_7000_2022.Rdata")
max(Freqs2$frequency)
# Chunk 17
colnames(Freqs2)<-c('Names_of_Y','Names_of_X','frequency')
Freqs2=data.frame(Freqs2)
plot(sort(Freqs2$frequency,decreasing = TRUE),type='s')
plot(Freqs2$frequency)
# Chunk 18
colnames(Freqs2)<-c('Names_of_Y','Names_of_X','frequency')
sort(Freqs2$frequency,decreasing = T)[1:50]
# Chunk 19
seuil=0.95
Freqs2$Names_of_X=gsub(pattern='temperature',replacement='',Freqs2$Names_of_X)
indices=which(Freqs2$frequency>=seuil)
# Chunk 20
Yvec=as.numeric(Y%*%square_root_inv_hat_Sigma)
Xvec=kronecker(t(square_root_inv_hat_Sigma),X)
Xvec_sel=(Xvec[,indices])
B_sel_hat=solve(t(Xvec_sel)%*%Xvec_sel,t(Xvec_sel)%*%Yvec)
Freqs2$estim=rep(0,p*q)
Freqs2$estim[indices]=as.vector(B_sel_hat)
# Chunk 21
gr<-ggplot(data=Freqs2[Freqs2$frequency>=seuil,],
aes(x=Names_of_Y,y=Names_of_X,color=estim))+
scale_color_gradient2(low="steelblue",mid = "white", high ="red")+
geom_point(size=2)+theme_bw()+ylab('Temperature')+
xlab('Proteins')+theme(axis.text.x = element_text(angle=90))
gr
save(gr,file="PROT_95_7krep.png")
# Chunk 22
estime=Freqs2[Freqs2$estim>0,]
estime$Names_of_Y
estime=data.frame(estime)
# Chunk 23
prot.select<-read.table("prot_var_select.csv", sep="", dec=".", header=T,row.names=1)
temperature<-factor(rep(c("Low","Medium","Elevated"),each=3),levels=c("Low","Medium","Elevated"))
prot.select<-cbind.data.frame(temperature,prot.select[,-1])
prot.select[,-1]
# Chunk 24
library("knitr") # pour avoir un format table dans les sorties
library("ggplot2") # pour avoir de "beaux"" graphiques
library("FactoMineR") # pour effectuer l'ACP
library("factoextra") # pour extraire et visualiser les résultats issus de FactoMineR
library("corrplot")
# Chunk 25
prot.CR=scale(prot.select[,2:22])
ncol(prot.select[,2:22])
# Chunk 26
# methode des kmeans
Kmax = ncol(prot.CR)
IW=numeric(Kmax)
for (k in 1:(Kmax))
{
km = kmeans(prot.CR,centers=k,nstart = 200)
IW[k] = km$tot.withinss
}
ggplot(data.frame(k = 1:(Kmax),
Iw = IW)) +
aes(x = k, y = Iw) +
geom_point() + # On trace les points
geom_line() + # On les relie par une ligne
labs(x = "K",y = expression(I[W](K)))
# Chunk 27
K = 3
km.prot.CR = kmeans(prot.CR,centers=K,nstart = 200)
km.prot.CR$totss
# Chunk 28
km.prot.CR$betweenss
km.prot.CR$tot.withinss
km.prot.CR = km.prot.CR$cluste
kable(km.prot.CR)
# Chunk 29
View(Freqs2)
View(table1)
setwd("C:/Users/delpi/Google Drive/COURS/AgroParisTech/2A/UC2/TD/3483462/3483462/Proteome/VAR SELECT")
#install.packages("MultiVarSel_1.0.tar.gz",repos=NULL)
library(MultiVarSel)
library(reshape)
library(ggplot2)
library(knitr)
#install.packages("MultiVarSel_1.0.tar.gz",repos=NULL)
library(MultiVarSel)
library(reshape)
library(ggplot2)
library(knitr)
table1<-read.table("proteome.csv", sep=";", dec=".", header=T,row.names=1)
temperature<-factor(rep(c("Low","Medium","Elevated"),each=3),levels=c("Low","Medium","Elevated"))
table2<-cbind.data.frame(temperature,table1[,-1])
which(colMeans(table2[,2:dim(table2)[2]])==0)
which(apply(table2[,2:dim(table2)[2]],2,sd)==0)
which(is.na(table2))
Y <- as.matrix(table2[, -1])
X <- model.matrix(lm(Y ~ temperature + 0,data=table2))
p <- ncol(X)
n=nrow(X)
print(n)
q=dim(Y)[2]
print(q)
Y=scale(Y)
residus=lm(as.matrix(Y)~X-1)$residuals
pvalue=whitening_test(residus)
print(pvalue)
result=whitening_choice(residus,c("AR1","nonparam","ARMA"),pAR=1,qMA=0)
result
View(table1)
options(width = 300)
options(encoding = 'UTF-8')
knitr::opts_chunk$set(
fig.width = 8,
fig.height = 5,
fig.align = "center",
fig.show="asis",
size = "tiny",
include = TRUE,
echo = TRUE,
eval = TRUE,
warning = FALSE,
message = FALSE,
results="markup",
tidy=FALSE,
tidy.opts=list(width.cutoff=90),
class.output="bg-success"
)
library(knitr)
library(pheatmap)
library(RColorBrewer)
library(coseq)
library(ggplot2)
library(FactoMineR)
table1<-read.table("selection_metabolites_seuil_0-9.csv", sep=";", dec=".", header=T,row.names=1)
table1<-read.table("selection_metabolites_seuil_0-9.csv", sep=";", dec=".", header=T,row.names=1)
temperature<-factor(rep(c("Low","Medium","Elevated"),each=3),levels=c("Low","Medium","Elevated"))
temperature<-factor(rep(c("Low","Medium","Elevated"),each=3),levels=c("Low","Medium","Elevated"))
# crÃ©er un tableau d'annotations des echÂ°
# pour rajouter un code couleur d'appartenance des echÂ° dans l'arbre
sample_group <- data.frame(temperature = temperature)
row.names(sample_group) <- row.names(table1)
sample_group
# Ã©diter le code couleur pour les groupes
# pour Ãªtre identique aux couleurs de l'ACP
my_colour = list(
temperature = c(
"Low" = "blue",
"Medium" = "green4",
"Elevated" = "orange"))
my_colour
pheatmap(
as.matrix(scale(table1)),
color = colorRampPalette(rev(brewer.pal(
n = 11, name = "RdYlBu"
)))(100),
clustering_method = "ward.D2",
annotation_row = sample_group,
annotation_colors = my_colour,
cutree_rows = 3,
cutree_cols = 4,
show_colnames = F,
main = "Heatmap",
cex = 1,
border_color = "black",
)
my_heatmap <- pheatmap(
as.matrix(scale(table1)),
color = colorRampPalette(rev(brewer.pal(
n = 11, name = "RdYlBu"
)))(100),
clustering_method = "ward.D2",
annotation_row = sample_group,
annotation_colors = my_colour,
cutree_rows = 3,
cutree_cols = 4,
show_colnames = F,
main = "Heatmap",
cex = 1,
border_color = "black",
silent=TRUE
)
# pour les clusters d'individus en lignes
# reprendre ici le nombre de clusters d'individus
# demandÃ© dans la heatmap avec cutree_rows = 3
# en choisissant la mÃªme valeur pour k
kable(sort(cutree(my_heatmap$tree_row, k=3)))
# pour les clusters de variables en colonnes
# reprendre ici le nombre de clusters de variables
# demandÃ© dans la heatmap avec cutree_cols = 4
# en choisissant la mÃªme valeur pour k
cluster_heatmap_variables <- cutree(my_heatmap$tree_col, k=4)[my_heatmap$tree_col[["order"]]]
kable(head(cluster_heatmap_variables,10))
# taille des clusters de variables
kable(table(cluster_heatmap_variables))
annot_col <- data.frame(row.names = names(cluster_heatmap_variables),
cluster = as.factor(cluster_heatmap_variables))
pheatmap(
as.matrix(scale(table1)),
color = colorRampPalette(rev(brewer.pal(
n = 11, name = "RdYlBu"
)))(100),
clustering_method = "ward.D2",
annotation_row = sample_group,
annotation_colors = my_colour,
cutree_rows = 3,
cutree_cols = 4,
show_colnames = F,
main = "Heatmap",
cex = 1,
border_color = "black",
annotation_col=annot_col
)
cluster_heatmap_variables <-
data.frame("metabolites" = names(cluster_heatmap_variables),
"cluster number" = cluster_heatmap_variables)
write.table(
cluster_heatmap_variables,
"metabolome_heatmap_compositions_seuil_0-9.csv",
append = F,
sep = ";",
dec = ".",
row.names = FALSE
)
View(my_heatmap)
View(estime)
View(Freqs2)
